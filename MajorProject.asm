;$mod186
NAME EG0_COMP

;page 175

;IO Setup for 80C188 
	UMCR    EQU    0FFA0H ; Upper Memory Control Register
	LMCR    EQU    0FFA2H ; Lower Memory control Register         
	PCSBA   EQU    0FFA4H ; Peripheral Chip Select Base Address
	MPCS    EQU    0FFA8H ; MMCS and PCS Alter Control Register
	I0CON	EQU	   0FF38H ;INT 0 Control Register -type 12
	I0CON_VAL EQU	08H;priority = 000, msk =1, lvl =0
	IMASK	EQU		0FF28H;
	IMASK_VAL EQU	0EFH; 1110 1111 INT0 unmasked
	PPI8255 EQU 0080H;8255 ADDRESS	
; STACK SEGMENT
STACK_SEG		SEGMENT

	
STACK_SEG		ENDS
	
	
; DATA SEGMENT
DATA_SEG        SEGMENT 
	DD	256	DUP(?) ; INTERRUPTS
	requested_floor  db	0H	
	current_floor	db	0AH
	db 20 DUP(?)
	TOS LABEL WORD
DATA_SEG        ENDS


; RESET SEGMENT
Reset_Seg   SEGMENT

    MOV DX, UMCR
    MOV AX, 03E07H
    OUT DX, AX
	JMP far PTR start
	
Reset_Seg  ends


; MESSAGE SEGMENT
MESSAGE_SEG     SEGMENT


MESSAGE_SEG     ENDS

;CODE SEGMENT
CODE_SEG        SEGMENT
       
PUBLIC	START

ASSUME  CS:CODE_SEG, DS:DATA_SEG, SS:STACK_SEG

INT0ISR PROC FAR

	MOV DX,PPI8255+1;PORTB
	IN AL,DX;GET INPUT FROM PORT B
	MOV CX,DATA_SEG
	MOV DS,CX
	LEA BX,current_floor
	MOV [BX],AL
	
	IRET
INT0ISR	ENDP

	
DELAY PROC FAR
	PUSH BX
	PUSH CX
	MOV BX,10
ITER:
	MOV CX, 07FFFh;
AGAIN:
	LOOP AGAIN
	DEC BX
	JNZ ITER
	POP CX
	POP BX
	RET
DELAY ENDP

TOBCD PROC FAR
	PUSH BX
	PUSH AX
	CMP CL,010
	JGE CONVERT
	MOV CH,CL ; BELOW 10 BCD IS THE SAME
CONVERT:
	XOR CH,CH
	XOR AX,AX
	MOV AX,CX
	MOV BL,010
	DIV BL
	MOV CH,AL
	MOV CL,04
	SHL CH,CL
	OR CH,AH
	
	POP AX
	POP BX
	RET
TOBCD ENDP
START:

; Initialize MPCS to MAP peripheral to IO address
	MOV DX, MPCS
	MOV AX, 0083H
	OUT DX, AX

; PCSBA initial, set the parallel port start from 00H
	MOV DX, PCSBA
	MOV AX, 0003H ; Peripheral starting address 00H no READY, No Waits
	OUT DX, AX

; Initialize LMCS 
    MOV DX, LMCR
    MOV AX, 01C4H  ; Starting address 1FFFH, 8K, No waits, last shoud be 5H for 1 waits      
    OUT DX, AX

	; YOUR CODE HERE ...
	; GOOD LUCK!
	;initialise 8255
;initialise stack segment
;	MOV AX, STACK_SEG
;	MOV SS,AX
	MOV BX,OFFSET TOS
	MOV SP,BX
	
	MOV AL,082H;1000 0010 VALUE OF CWR
	MOV DX,PPI8255+3; CWR
	OUT DX,AL	
	;initialise INT0
	MOV DX,OFFSET INT0ISR
	
	INT0VECT EQU 030H;12*4 VALUE OF MEMORY WHERE INTO'S VECTOR IS LOCATED
	
	MOV AX,0H
	MOV DS,AX; MOVES DATASEGMENT TO 0000H
	MOV BX,CS
	MOV DI,INT0VECT
	MOV [DI],BX;MOVES CS TO 0000:0030H
	MOV [DI]+2,DX;MOVES INTOISR'S OFFSET TO 0000:0032H

		

OUTPUT:
	MOV CX,DATA_SEG
	MOV DS,CX
	LEA DI,current_floor
	LEA SI,requested_floor
	MOV AL,[SI]
	MOV AH,[DI]
	CMP AL,AH
	JL GOUP
	JG GODOWN
	JMP MOVED
GOUP:
	MOV DX,PPI8255+2;PORTC
	INC AL
	MOV CL,AL
	CALL TOBCD
	XOR AX,AX
	XOR CL,CL
	MOV AL,CH
	OUT	DX,AX
	CALL DELAY
	JMP MOVED
GODOWN:
	MOV DX,PPI8255+2;PORTC
	DEC AL
	MOV CL,AL
	CALL TOBCD	
	XOR AX,AX
	XOR CL,CL
	MOV AL,CH
	OUT	DX,AX
	CALL DELAY
MOVED:
	JMP OUTPUT			

	
CODE_SEG        ENDS
END 
